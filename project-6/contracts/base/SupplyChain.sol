pragma solidity ^0.4.24;
// Define a contract 'Supplychain'
contract SupplyChain {

  // Define 'owner'
  address owner;

  // Define a variable called 'vin' for Universal Product Code (UPC)
  uint  vin;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Item) items;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Assembled,      // 0
    SoldForDealer,  // 1
    Shipped,        // 2
    Received,       // 3
    Purchased       // 4
  }

  State constant defaultState = State.Assembled;

  // Define a struct 'Item' with the following fields:
  struct Item {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    vin; //  Vehicle identification number, generated by the Manufacturer, goes on the car, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 5 stages
    address originManufacturerID; // Metamask-Ethereum address of the Manufacturer
    string  originManufacturerName; // Manufacturer Name
    string  originManufacturerInformation;  // Manufacturer Information
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   itemState;  // Product State as represented in the enum above
    address dealerID; // Metamask-Ethereum address of the Dealer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 5 events with the same 5 state values and accept 'vin' as input argument
  event Assembled(uint vin);
  event SoldForDealer(uint vin);
  event Shipped(uint vin);
  event Received(uint vin);
  event Purchased(uint vin);

  // Define a modifier that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  // Define a modifier that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) { 
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _vin) {
    _;
    uint _price = items[_vin].productPrice;
    uint amountToReturn = msg.value - _price;
    items[_vin].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a vin is Assembled
  modifier assembled(uint _vin) {
    require(items[_vin].itemState == State.Assembled);
    _;
  }

  // Define a modifier that checks if an item.state of a vin is SoldForDealer
  modifier soldForDealer(uint _vin) {

    _;
  }
  
  // Define a modifier that checks if an item.state of a vin is Shipped
  modifier shipped(uint _vin) {

    _;
  }

  // Define a modifier that checks if an item.state of a vin is Received
  modifier received(uint _vin) {

    _;
  }

  // Define a modifier that checks if an item.state of a vin is Purchased
  modifier purchased(uint _vin) {
    
    _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'vin' to 1
  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    vin = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(owner);
    }
  }

  // Define a function 'assembleItem' that allows a manufacturer to mark an item 'Assembled'
  function assembleItem(uint _vin, address _originManufacturerID, string _originManufacturerName, string _originManufacturerInformation, string  _productNotes) public
  {
    // Add the new item as part of Assemble
    
    // Increment sku
    sku = sku + 1;
    // Emit the appropriate event
    
  }

  // Define a function 'buyItem' that allows a dealer to mark an item 'SoldForDealer'
  function buyItem(uint _vin) public
  // Call modifier to check if vin has passed previous supply chain stage
  
  // Call modifier to verify caller of this function
  
  {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'shipItem' that allows the manufacturer to mark an item 'Shipped'
  // Use the above modifiers to check if the item is sold
  function shipItem(uint _vin) public 
    // Call modifier to check if vin has passed previous supply chain stage
    
    // Call modifier to verify caller of this function
    
    {
    // Update the appropriate fields
    
    // Emit the appropriate event
    
  }

  // Define a function 'receiveItem' that allows the dealer to mark an item 'Received'
  // Use the above modifiers to check if the item is shipped
  function receiveItem(uint _vin) public 
    // Call modifier to check if vin has passed previous supply chain stage
    
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields - ownerID, dealerID, itemState
    
    // Emit the appropriate event
    
  }

  // Define a function 'purchaseItem' that allows the consumer to mark an item 'Purchased'  
  // Use the above modifiers to check if the item is received
  function purchaseItem(uint _vin) public 
    // Call modifier to check if vin has passed previous supply chain stage
    
    // Access Control List enforced by calling Smart Contract / DApp
    {
    // Update the appropriate fields - ownerID, consumerID, itemState
    
    // Emit the appropriate event`
    
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchItemBufferOne(uint _vin) public view returns
  (
    uint itemSKU,
    uint itemVIN,
    address ownerID,
    address originManufacturerID,
    string originManufacturerName,
    string originManufacturerInformation
  )
  {
    // Assign values to the 6 parameters
    Item memory item = items[_vin];
    return
    (
    item.sku,
    item.vin,
    item.ownerID,
    item.originManufacturerID,
    item.originManufacturerName,
    item.originManufacturerInformation
    );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchItemBufferTwo(uint _vin) public view returns
  (
    uint itemSKU,
    uint itemVIN,
    string productNotes,
    uint productPrice,
    uint itemState,
    address dealerID,
    address consumerID
  )
  {
    // Assign values to the 7 parameters

    Item memory item = items[_vin];
    return
    (
    item.sku,
    item.vin,
    item.productNotes,
    item.productPrice,
    uint(item.itemState),
    item.dealerID,
    item.consumerID
    );
  }
}
