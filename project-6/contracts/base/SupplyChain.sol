pragma solidity ^0.4.24;
// Define a contract 'Supplychain'
contract SupplyChain {

  // Define 'owner'
  address owner;

  // Define a variable called 'vin' for Universal Product Code (UPC)
  uint  vin;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  // Define a public mapping 'cars' that maps the UPC to an Car.
  mapping (uint => Car) cars;

  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash, 
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;
  
  // Define enum 'State' with the following values:
  enum State 
  { 
    Assembled,      // 0
    SoldForDealer,  // 1
    Shipped,        // 2
    Received,       // 3
    Purchased       // 4
  }

  State constant defaultState = State.Assembled;

  // Define a struct 'Car' with the following fields:
  struct Car {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    vin; //  Vehicle identification number, generated by the Manufacturer, goes on the car, can be verified by the Consumer
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 5 stages
    address originManufacturerID; // Metamask-Ethereum address of the Manufacturer
    string  originManufacturerName; // Manufacturer Name
    string  originManufacturerInformation;  // Manufacturer Information
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    State   carState;  // Product State as represented in the enum above
    address dealerID; // Metamask-Ethereum address of the Dealer
    address consumerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 5 events with the same 5 state values and accept 'vin' as input argument
  event Assembled(uint vin);
  event SoldForDealer(uint vin);
  event Shipped(uint vin);
  event Received(uint vin);
  event Purchased(uint vin);

  // Define a modifier that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  // Define a modifier that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address); 
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _vin) {
    uint _price = cars[_vin].productPrice;
    require(msg.value >= _price); 
    _;
  }
  
  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValueForDealer(uint _vin) {
    _;
    uint _price = cars[_vin].productPrice;
    uint amountToReturn = msg.value - _price;
    cars[_vin].dealerID.transfer(amountToReturn);
  }

  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValueForConsumer(uint _vin) {
    _;
    uint _price = cars[_vin].productPrice;
    uint amountToReturn = msg.value - _price;
    cars[_vin].consumerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an car was created
  modifier checkCarExists(uint _vin) {
    require(cars[_vin].ownerID != address(0));
    _;
  }
  // Define a modifier that checks if an car was created
  modifier checkCarNotExists(uint _vin) {
    require(cars[_vin].ownerID == address(0));
    _;
  }
  // Define a modifier that checks if an car.state of a vin is Assembled
  modifier assembled(uint _vin) {
    require(cars[_vin].carState == State.Assembled);
    _;
  }

  // Define a modifier that checks if an car.state of a vin is SoldForDealer
  modifier soldForDealer(uint _vin) {
    require(cars[_vin].carState == State.SoldForDealer);
    _;
  }
  
  // Define a modifier that checks if an car.state of a vin is Shipped
  modifier shipped(uint _vin) {
    require(cars[_vin].carState == State.Shipped);
    _;
  }

  // Define a modifier that checks if an car.state of a vin is Received
  modifier received(uint _vin) {
    require(cars[_vin].carState == State.Received);
    _;
  }

  // Define a modifier that checks if an car.state of a vin is Purchased
  modifier purchased(uint _vin) {
    require(cars[_vin].carState == State.Purchased);
  _;
  }

  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'vin' to 1
  constructor() public payable {
    owner = msg.sender;
    sku = 1;
    vin = 1;
  }

  // Define a function 'kill' if required
  function kill() public {
    if (msg.sender == owner) {
      selfdestruct(owner);
    }
  }

  // Define a function 'assembleCar' that allows a manufacturer to mark an car 'Assembled'
  function assembleCar(uint _vin, address _originManufacturerID, string _originManufacturerName, string _originManufacturerInformation, string  _productNotes, uint _productPrice) checkCarNotExists(_vin) public
  {
    Car memory car;
    car.vin = _vin;
    car.sku = sku;
    car.ownerID = _originManufacturerID;
    car.originManufacturerID = _originManufacturerID;
    car.originManufacturerName = _originManufacturerName;
    car.originManufacturerInformation = _originManufacturerInformation;
    car.productNotes = _productNotes;
    car.productPrice = _productPrice;
    car.carState = defaultState;
    car.dealerID = address(0);
    car.consumerID = address(0);

    cars[_vin] = car;

    // Increment sku
    sku = sku + 1;

    // Emit the appropriate event
    emit Assembled(_vin);
    
  }

  // Define a function 'buyCar' that allows a dealer to mark an car 'SoldForDealer'
  function buyCar(uint _vin) assembled(_vin) checkCarExists(_vin) paidEnough(_vin) checkValueForDealer(_vin) public payable
  {
    // Update the appropriate fields
    cars[_vin].carState = State.SoldForDealer;
    cars[_vin].ownerID = msg.sender;
    cars[_vin].dealerID = msg.sender;

    cars[_vin].originManufacturerID.transfer(cars[_vin].productPrice);

    // Emit the appropriate event
    emit SoldForDealer(_vin);
  }

  // Define a function 'shipCar' that allows the manufacturer to mark an car 'Shipped'
  // Use the above modifiers to check if the car is sold
  function shipCar(uint _vin) checkCarExists(_vin) soldForDealer(_vin) public
    
    {
      // Update the appropriate fields
      cars[_vin].carState = State.Shipped;

      // Emit the appropriate event
      emit Shipped(_vin);
  }

  // Define a function 'receiveCar' that allows the dealer to mark an car 'Received'
  // Use the above modifiers to check if the car is shipped
  function receiveCar(uint _vin) checkCarExists(_vin) shipped(_vin) public
    {
      // Update the appropriate fields
      cars[_vin].carState = State.Received;

      // Emit the appropriate event
      emit Received(_vin);
    
  }

  // Define a function 'purchaseCar' that allows the consumer to mark an car 'Purchased'
  // Use the above modifiers to check if the car is received
  function purchaseCar(uint _vin) checkCarExists(_vin) received(_vin) paidEnough(_vin) checkValueForConsumer(_vin) public payable
    {
      // Update the appropriate fields
      cars[_vin].carState = State.Purchased;
      cars[_vin].ownerID = msg.sender;
      cars[_vin].consumerID = msg.sender;

      cars[_vin].dealerID.transfer(cars[_vin].productPrice);

      // Emit the appropriate event
      emit Purchased(_vin);
  }

  // Define a function 'fetchCarBuffer' that fetches the data
  function fetchCarBuffer(uint _vin) public view returns
  (
    uint carSKU,
    uint carVIN,
    address ownerID,
    address originManufacturerID,
    string originManufacturerName,
    string originManufacturerInformation,
    string productNotes,
    uint productPrice,
    uint carState,
    address dealerID,
    address consumerID
  )
  {

    Car memory car = cars[_vin];
    return
    (
    car.sku,
    car.vin,
    car.ownerID,
    car.originManufacturerID,
    car.originManufacturerName,
    car.originManufacturerInformation,
    car.productNotes,
    car.productPrice,
    uint(car.carState),
    car.dealerID,
    car.consumerID
    );
  }
}
